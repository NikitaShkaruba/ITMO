                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                              4 ; This file was generated Wed Nov 08 14:01:43 2017
                              5 ;--------------------------------------------------------
                              6 	.module handler
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _NUMBER_LIMIT
                             13 	.globl _DIP_POLL_MODE
                             14 	.globl _false
                             15 	.globl _true
                             16 	.globl _error
                             17 	.globl _reset
                             18 	.globl _read_dip
                             19 	.globl _SPR0
                             20 	.globl _SPR1
                             21 	.globl _CPHA
                             22 	.globl _CPOL
                             23 	.globl _SPIM
                             24 	.globl _SPE
                             25 	.globl _WCOL
                             26 	.globl _ISPI
                             27 	.globl _I2CI
                             28 	.globl _I2CTX
                             29 	.globl _I2CRS
                             30 	.globl _I2CM
                             31 	.globl _MDI
                             32 	.globl _MCO
                             33 	.globl _MDE
                             34 	.globl _MDO
                             35 	.globl _CS0
                             36 	.globl _CS1
                             37 	.globl _CS2
                             38 	.globl _CS3
                             39 	.globl _SCONV
                             40 	.globl _CCONV
                             41 	.globl _DMA
                             42 	.globl _ADCI
                             43 	.globl _P
                             44 	.globl _F1
                             45 	.globl _OV
                             46 	.globl _RS0
                             47 	.globl _RS1
                             48 	.globl _F0
                             49 	.globl _AC
                             50 	.globl _CY
                             51 	.globl _CAP2
                             52 	.globl _CNT2
                             53 	.globl _TR2
                             54 	.globl _XEN
                             55 	.globl _TCLK
                             56 	.globl _RCLK
                             57 	.globl _EXF2
                             58 	.globl _TF2
                             59 	.globl _WDE
                             60 	.globl _WDS
                             61 	.globl _WDR2
                             62 	.globl _WDR1
                             63 	.globl _PRE0
                             64 	.globl _PRE1
                             65 	.globl _PRE2
                             66 	.globl _PX0
                             67 	.globl _PT0
                             68 	.globl _PX1
                             69 	.globl _PT1
                             70 	.globl _PS
                             71 	.globl _PT2
                             72 	.globl _PADC
                             73 	.globl _PSI
                             74 	.globl _RXD
                             75 	.globl _TXD
                             76 	.globl _INT0
                             77 	.globl _INT1
                             78 	.globl _T0
                             79 	.globl _T1
                             80 	.globl _WR
                             81 	.globl _RD
                             82 	.globl _EX0
                             83 	.globl _ET0
                             84 	.globl _EX1
                             85 	.globl _ET1
                             86 	.globl _ES
                             87 	.globl _ET2
                             88 	.globl _EADC
                             89 	.globl _EA
                             90 	.globl _RI
                             91 	.globl _TI
                             92 	.globl _RB8
                             93 	.globl _TB8
                             94 	.globl _REN
                             95 	.globl _SM2
                             96 	.globl _SM1
                             97 	.globl _SM0
                             98 	.globl _T2
                             99 	.globl _T2EX
                            100 	.globl _IT0
                            101 	.globl _IE0
                            102 	.globl _IT1
                            103 	.globl _IE1
                            104 	.globl _TR0
                            105 	.globl _TF0
                            106 	.globl _TR1
                            107 	.globl _TF1
                            108 	.globl _DACCON
                            109 	.globl _DAC1H
                            110 	.globl _DAC1L
                            111 	.globl _DAC0H
                            112 	.globl _DAC0L
                            113 	.globl _SPICON
                            114 	.globl _SPIDAT
                            115 	.globl _ADCCON3
                            116 	.globl _ADCGAINH
                            117 	.globl _ADCGAINL
                            118 	.globl _ADCOFSH
                            119 	.globl _ADCOFSL
                            120 	.globl _B
                            121 	.globl _ADCCON1
                            122 	.globl _I2CCON
                            123 	.globl _ACC
                            124 	.globl _PSMCON
                            125 	.globl _ADCDATAH
                            126 	.globl _ADCDATAL
                            127 	.globl _ADCCON2
                            128 	.globl _DMAP
                            129 	.globl _DMAH
                            130 	.globl _DMAL
                            131 	.globl _PSW
                            132 	.globl _TH2
                            133 	.globl _TL2
                            134 	.globl _RCAP2H
                            135 	.globl _RCAP2L
                            136 	.globl _T2CON
                            137 	.globl _EADRL
                            138 	.globl _WDCON
                            139 	.globl _EDATA4
                            140 	.globl _EDATA3
                            141 	.globl _EDATA2
                            142 	.globl _EDATA1
                            143 	.globl _ETIM3
                            144 	.globl _ETIM2
                            145 	.globl _ETIM1
                            146 	.globl _ECON
                            147 	.globl _IP
                            148 	.globl _P3
                            149 	.globl _IE2
                            150 	.globl _IE
                            151 	.globl _P2
                            152 	.globl _I2CADD
                            153 	.globl _I2CDAT
                            154 	.globl _SBUF
                            155 	.globl _SCON
                            156 	.globl _P1
                            157 	.globl _TH1
                            158 	.globl _TH0
                            159 	.globl _TL1
                            160 	.globl _TL0
                            161 	.globl _TMOD
                            162 	.globl _TCON
                            163 	.globl _PCON
                            164 	.globl _DPP
                            165 	.globl _DPH
                            166 	.globl _DPL
                            167 	.globl _SP
                            168 	.globl _P0
                            169 	.globl _state
                            170 	.globl _number
                            171 	.globl _mode
                            172 	.globl _initialize_handler
                            173 	.globl _poll_loop
                            174 	.globl _int_loop
                            175 	.globl _handler_loop
                            176 	.globl _handler_int
                            177 ;--------------------------------------------------------
                            178 ; special function registers
                            179 ;--------------------------------------------------------
                            180 	.area RSEG    (DATA)
                    0080    181 _P0	=	0x0080
                    0081    182 _SP	=	0x0081
                    0082    183 _DPL	=	0x0082
                    0083    184 _DPH	=	0x0083
                    0084    185 _DPP	=	0x0084
                    0087    186 _PCON	=	0x0087
                    0088    187 _TCON	=	0x0088
                    0089    188 _TMOD	=	0x0089
                    008A    189 _TL0	=	0x008a
                    008B    190 _TL1	=	0x008b
                    008C    191 _TH0	=	0x008c
                    008D    192 _TH1	=	0x008d
                    0090    193 _P1	=	0x0090
                    0098    194 _SCON	=	0x0098
                    0099    195 _SBUF	=	0x0099
                    009A    196 _I2CDAT	=	0x009a
                    009B    197 _I2CADD	=	0x009b
                    00A0    198 _P2	=	0x00a0
                    00A8    199 _IE	=	0x00a8
                    00A9    200 _IE2	=	0x00a9
                    00B0    201 _P3	=	0x00b0
                    00B8    202 _IP	=	0x00b8
                    00B9    203 _ECON	=	0x00b9
                    00BA    204 _ETIM1	=	0x00ba
                    00BB    205 _ETIM2	=	0x00bb
                    00C4    206 _ETIM3	=	0x00c4
                    00BC    207 _EDATA1	=	0x00bc
                    00BD    208 _EDATA2	=	0x00bd
                    00BE    209 _EDATA3	=	0x00be
                    00BF    210 _EDATA4	=	0x00bf
                    00C0    211 _WDCON	=	0x00c0
                    00C6    212 _EADRL	=	0x00c6
                    00C8    213 _T2CON	=	0x00c8
                    00CA    214 _RCAP2L	=	0x00ca
                    00CB    215 _RCAP2H	=	0x00cb
                    00CC    216 _TL2	=	0x00cc
                    00CD    217 _TH2	=	0x00cd
                    00D0    218 _PSW	=	0x00d0
                    00D2    219 _DMAL	=	0x00d2
                    00D3    220 _DMAH	=	0x00d3
                    00D4    221 _DMAP	=	0x00d4
                    00D8    222 _ADCCON2	=	0x00d8
                    00D9    223 _ADCDATAL	=	0x00d9
                    00DA    224 _ADCDATAH	=	0x00da
                    00DF    225 _PSMCON	=	0x00df
                    00E0    226 _ACC	=	0x00e0
                    00E8    227 _I2CCON	=	0x00e8
                    00EF    228 _ADCCON1	=	0x00ef
                    00F0    229 _B	=	0x00f0
                    00F1    230 _ADCOFSL	=	0x00f1
                    00F2    231 _ADCOFSH	=	0x00f2
                    00F3    232 _ADCGAINL	=	0x00f3
                    00F4    233 _ADCGAINH	=	0x00f4
                    00F5    234 _ADCCON3	=	0x00f5
                    00F7    235 _SPIDAT	=	0x00f7
                    00F8    236 _SPICON	=	0x00f8
                    00F9    237 _DAC0L	=	0x00f9
                    00FA    238 _DAC0H	=	0x00fa
                    00FB    239 _DAC1L	=	0x00fb
                    00FC    240 _DAC1H	=	0x00fc
                    00FD    241 _DACCON	=	0x00fd
                            242 ;--------------------------------------------------------
                            243 ; special function bits
                            244 ;--------------------------------------------------------
                            245 	.area RSEG    (DATA)
                    008F    246 _TF1	=	0x008f
                    008E    247 _TR1	=	0x008e
                    008D    248 _TF0	=	0x008d
                    008C    249 _TR0	=	0x008c
                    008B    250 _IE1	=	0x008b
                    008A    251 _IT1	=	0x008a
                    0089    252 _IE0	=	0x0089
                    0088    253 _IT0	=	0x0088
                    0091    254 _T2EX	=	0x0091
                    0090    255 _T2	=	0x0090
                    009F    256 _SM0	=	0x009f
                    009E    257 _SM1	=	0x009e
                    009D    258 _SM2	=	0x009d
                    009C    259 _REN	=	0x009c
                    009B    260 _TB8	=	0x009b
                    009A    261 _RB8	=	0x009a
                    0099    262 _TI	=	0x0099
                    0098    263 _RI	=	0x0098
                    00AF    264 _EA	=	0x00af
                    00AE    265 _EADC	=	0x00ae
                    00AD    266 _ET2	=	0x00ad
                    00AC    267 _ES	=	0x00ac
                    00AB    268 _ET1	=	0x00ab
                    00AA    269 _EX1	=	0x00aa
                    00A9    270 _ET0	=	0x00a9
                    00A8    271 _EX0	=	0x00a8
                    00B7    272 _RD	=	0x00b7
                    00B6    273 _WR	=	0x00b6
                    00B5    274 _T1	=	0x00b5
                    00B4    275 _T0	=	0x00b4
                    00B3    276 _INT1	=	0x00b3
                    00B2    277 _INT0	=	0x00b2
                    00B1    278 _TXD	=	0x00b1
                    00B0    279 _RXD	=	0x00b0
                    00BF    280 _PSI	=	0x00bf
                    00BE    281 _PADC	=	0x00be
                    00BD    282 _PT2	=	0x00bd
                    00BC    283 _PS	=	0x00bc
                    00BB    284 _PT1	=	0x00bb
                    00BA    285 _PX1	=	0x00ba
                    00B9    286 _PT0	=	0x00b9
                    00B8    287 _PX0	=	0x00b8
                    00C7    288 _PRE2	=	0x00c7
                    00C6    289 _PRE1	=	0x00c6
                    00C5    290 _PRE0	=	0x00c5
                    00C3    291 _WDR1	=	0x00c3
                    00C2    292 _WDR2	=	0x00c2
                    00C1    293 _WDS	=	0x00c1
                    00C0    294 _WDE	=	0x00c0
                    00CF    295 _TF2	=	0x00cf
                    00CE    296 _EXF2	=	0x00ce
                    00CD    297 _RCLK	=	0x00cd
                    00CC    298 _TCLK	=	0x00cc
                    00CB    299 _XEN	=	0x00cb
                    00CA    300 _TR2	=	0x00ca
                    00C9    301 _CNT2	=	0x00c9
                    00C8    302 _CAP2	=	0x00c8
                    00D7    303 _CY	=	0x00d7
                    00D6    304 _AC	=	0x00d6
                    00D5    305 _F0	=	0x00d5
                    00D4    306 _RS1	=	0x00d4
                    00D3    307 _RS0	=	0x00d3
                    00D2    308 _OV	=	0x00d2
                    00D1    309 _F1	=	0x00d1
                    00D0    310 _P	=	0x00d0
                    00DF    311 _ADCI	=	0x00df
                    00DE    312 _DMA	=	0x00de
                    00DD    313 _CCONV	=	0x00dd
                    00DC    314 _SCONV	=	0x00dc
                    00DB    315 _CS3	=	0x00db
                    00DA    316 _CS2	=	0x00da
                    00D9    317 _CS1	=	0x00d9
                    00D8    318 _CS0	=	0x00d8
                    00EF    319 _MDO	=	0x00ef
                    00EE    320 _MDE	=	0x00ee
                    00ED    321 _MCO	=	0x00ed
                    00EC    322 _MDI	=	0x00ec
                    00EB    323 _I2CM	=	0x00eb
                    00EA    324 _I2CRS	=	0x00ea
                    00E9    325 _I2CTX	=	0x00e9
                    00E8    326 _I2CI	=	0x00e8
                    00FF    327 _ISPI	=	0x00ff
                    00FE    328 _WCOL	=	0x00fe
                    00FD    329 _SPE	=	0x00fd
                    00FC    330 _SPIM	=	0x00fc
                    00FB    331 _CPOL	=	0x00fb
                    00FA    332 _CPHA	=	0x00fa
                    00F9    333 _SPR1	=	0x00f9
                    00F8    334 _SPR0	=	0x00f8
                            335 ;--------------------------------------------------------
                            336 ; overlayable register banks
                            337 ;--------------------------------------------------------
                            338 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     339 	.ds 8
                            340 ;--------------------------------------------------------
                            341 ; internal ram data
                            342 ;--------------------------------------------------------
                            343 	.area DSEG    (DATA)
   0000                     344 _MODE_INT:
   0000                     345 	.ds 1
   0001                     346 _mode::
   0001                     347 	.ds 1
   0002                     348 _number::
   0002                     349 	.ds 1
   0003                     350 _state::
   0003                     351 	.ds 1
                            352 ;--------------------------------------------------------
                            353 ; overlayable items in internal ram 
                            354 ;--------------------------------------------------------
                            355 	.area OSEG    (OVR,DATA)
                            356 ;--------------------------------------------------------
                            357 ; indirectly addressable internal ram data
                            358 ;--------------------------------------------------------
                            359 	.area ISEG    (DATA)
                            360 ;--------------------------------------------------------
                            361 ; absolute internal ram data
                            362 ;--------------------------------------------------------
                            363 	.area IABS    (ABS,DATA)
                            364 	.area IABS    (ABS,DATA)
                            365 ;--------------------------------------------------------
                            366 ; bit data
                            367 ;--------------------------------------------------------
                            368 	.area BSEG    (BIT)
                            369 ;--------------------------------------------------------
                            370 ; paged external ram data
                            371 ;--------------------------------------------------------
                            372 	.area PSEG    (PAG,XDATA)
                            373 ;--------------------------------------------------------
                            374 ; external ram data
                            375 ;--------------------------------------------------------
                            376 	.area XSEG    (XDATA)
                            377 ;--------------------------------------------------------
                            378 ; absolute external ram data
                            379 ;--------------------------------------------------------
                            380 	.area XABS    (ABS,XDATA)
                            381 ;--------------------------------------------------------
                            382 ; external initialized ram data
                            383 ;--------------------------------------------------------
                            384 	.area XISEG   (XDATA)
                            385 	.area HOME    (CODE)
                            386 	.area GSINIT0 (CODE)
                            387 	.area GSINIT1 (CODE)
                            388 	.area GSINIT2 (CODE)
                            389 	.area GSINIT3 (CODE)
                            390 	.area GSINIT4 (CODE)
                            391 	.area GSINIT5 (CODE)
                            392 	.area GSINIT  (CODE)
                            393 	.area GSFINAL (CODE)
                            394 	.area CSEG    (CODE)
                            395 ;--------------------------------------------------------
                            396 ; global & static initialisations
                            397 ;--------------------------------------------------------
                            398 	.area HOME    (CODE)
                            399 	.area GSINIT  (CODE)
                            400 	.area GSFINAL (CODE)
                            401 	.area GSINIT  (CODE)
                            402 ;	./INCLUDE/handler.h:9: static u8 MODE_INT=0xFF;
   0000 75*00 FF            403 	mov	_MODE_INT,#0xFF
                            404 ;--------------------------------------------------------
                            405 ; Home
                            406 ;--------------------------------------------------------
                            407 	.area HOME    (CODE)
                            408 	.area HOME    (CODE)
                            409 ;--------------------------------------------------------
                            410 ; code
                            411 ;--------------------------------------------------------
                            412 	.area CSEG    (CODE)
                            413 ;------------------------------------------------------------
                            414 ;Allocation info for local variables in function 'read_dip'
                            415 ;------------------------------------------------------------
                            416 ;------------------------------------------------------------
                            417 ;	SRC/handler.c:19: u8 read_dip(){
                            418 ;	-----------------------------------------
                            419 ;	 function read_dip
                            420 ;	-----------------------------------------
   0000                     421 _read_dip:
                    0002    422 	ar2 = 0x02
                    0003    423 	ar3 = 0x03
                    0004    424 	ar4 = 0x04
                    0005    425 	ar5 = 0x05
                    0006    426 	ar6 = 0x06
                    0007    427 	ar7 = 0x07
                    0000    428 	ar0 = 0x00
                    0001    429 	ar1 = 0x01
                            430 ;	SRC/handler.c:20: return read_max(EXT_LO);
   0000 90 00 02            431 	mov	dptr,#0x0002
   0003 02s00r00            432 	ljmp	_read_max
                            433 ;------------------------------------------------------------
                            434 ;Allocation info for local variables in function 'reset'
                            435 ;------------------------------------------------------------
                            436 ;------------------------------------------------------------
                            437 ;	SRC/handler.c:23: void reset() {
                            438 ;	-----------------------------------------
                            439 ;	 function reset
                            440 ;	-----------------------------------------
   0006                     441 _reset:
                            442 ;	SRC/handler.c:24: number=0;
   0006 75*02 00            443 	mov	_number,#0x00
                            444 ;	SRC/handler.c:25: state=STATE_NUMBER;
   0009 75*03 00            445 	mov	_state,#0x00
   000C 22                  446 	ret
                            447 ;------------------------------------------------------------
                            448 ;Allocation info for local variables in function 'initialize_handler'
                            449 ;------------------------------------------------------------
                            450 ;------------------------------------------------------------
                            451 ;	SRC/handler.c:28: void initialize_handler() {
                            452 ;	-----------------------------------------
                            453 ;	 function initialize_handler
                            454 ;	-----------------------------------------
   000D                     455 _initialize_handler:
                            456 ;	SRC/handler.c:29: mode = MODE_POLL;
   000D 90s00r02            457 	mov	dptr,#_MODE_POLL
   0010 E4                  458 	clr	a
   0011 93                  459 	movc	a,@a+dptr
   0012 F5*01               460 	mov	_mode,a
                            461 ;	SRC/handler.c:30: reset();
   0014 02s00r06            462 	ljmp	_reset
                            463 ;------------------------------------------------------------
                            464 ;Allocation info for local variables in function 'poll_loop'
                            465 ;------------------------------------------------------------
                            466 ;i                         Allocated to registers r3 
                            467 ;byte_in                   Allocated to stack - offset 1
                            468 ;------------------------------------------------------------
                            469 ;	SRC/handler.c:33: void poll_loop() {
                            470 ;	-----------------------------------------
                            471 ;	 function poll_loop
                            472 ;	-----------------------------------------
   0017                     473 _poll_loop:
   0017 C0*00               474 	push	_bp
   0019 85 81*00            475 	mov	_bp,sp
   001C 05 81               476 	inc	sp
                            477 ;	SRC/handler.c:36: leds(0);
   001E 75 82 00            478 	mov	dpl,#0x00
   0021 12s00r00            479 	lcall	_leds
                            480 ;	SRC/handler.c:38: while( read_dip()==DIP_POLL_MODE ){
   0024                     481 00106$:
   0024 12s00r00            482 	lcall	_read_dip
   0027 AA 82               483 	mov	r2,dpl
   0029 90s00r03            484 	mov	dptr,#_DIP_POLL_MODE
   002C E4                  485 	clr	a
   002D 93                  486 	movc	a,@a+dptr
   002E FB                  487 	mov	r3,a
   002F EA                  488 	mov	a,r2
   0030 B5 03 56            489 	cjne	a,ar3,00108$
                            490 ;	SRC/handler.c:39: if( read_byte(&byte_in) ){
   0033 AA*00               491 	mov	r2,_bp
   0035 0A                  492 	inc	r2
   0036 7B 00               493 	mov	r3,#0x00
   0038 7C 40               494 	mov	r4,#0x40
   003A 8A 82               495 	mov	dpl,r2
   003C 8B 83               496 	mov	dph,r3
   003E 8C F0               497 	mov	b,r4
   0040 12s00r00            498 	lcall	_read_byte
   0043 E5 82               499 	mov	a,dpl
   0045 60 37               500 	jz	00105$
                            501 ;	SRC/handler.c:40: for( i=1;i<=3;i++ ){
   0047 A8*00               502 	mov	r0,_bp
   0049 08                  503 	inc	r0
   004A 86 02               504 	mov	ar2,@r0
   004C 7B 03               505 	mov	r3,#0x03
   004E                     506 00111$:
                            507 ;	SRC/handler.c:41: if (byte_in > 96 && byte_in < 123) {
   004E EA                  508 	mov	a,r2
   004F 24 9F               509 	add	a,#0xff - 0x60
   0051 50 0E               510 	jnc	00102$
   0053 BA 7B 00            511 	cjne	r2,#0x7B,00126$
   0056                     512 00126$:
   0056 50 09               513 	jnc	00102$
                            514 ;	SRC/handler.c:42: byte_in = byte_in - 32;
   0058 EA                  515 	mov	a,r2
   0059 24 E0               516 	add	a,#0xe0
   005B FA                  517 	mov	r2,a
   005C A8*00               518 	mov	r0,_bp
   005E 08                  519 	inc	r0
   005F A6 02               520 	mov	@r0,ar2
   0061                     521 00102$:
                            522 ;	SRC/handler.c:47: send_byte(byte_in);
   0061 8A 82               523 	mov	dpl,r2
   0063 C0 02               524 	push	ar2
   0065 C0 03               525 	push	ar3
   0067 12s00r00            526 	lcall	_send_byte
   006A D0 03               527 	pop	ar3
   006C D0 02               528 	pop	ar2
   006E DB DE               529 	djnz	r3,00111$
                            530 ;	SRC/handler.c:40: for( i=1;i<=3;i++ ){
                            531 ;	SRC/handler.c:49: send_string("\r\n");
   0070 A8*00               532 	mov	r0,_bp
   0072 08                  533 	inc	r0
   0073 A6 02               534 	mov	@r0,ar2
   0075 90s00r05            535 	mov	dptr,#__str_0
   0078 75 F0 80            536 	mov	b,#0x80
   007B 12s00r00            537 	lcall	_send_string
   007E                     538 00105$:
                            539 ;	SRC/handler.c:52: delay_ms(1);
   007E 90 00 01            540 	mov	dptr,#(0x01&0x00ff)
   0081 E4                  541 	clr	a
   0082 F5 F0               542 	mov	b,a
   0084 12s00r00            543 	lcall	_delay_ms
   0087 80 9B               544 	sjmp	00106$
   0089                     545 00108$:
                            546 ;	SRC/handler.c:55: mode=MODE_INT;
   0089 85*00*01            547 	mov	_mode,_MODE_INT
   008C 85*00 81            548 	mov	sp,_bp
   008F D0*00               549 	pop	_bp
   0091 22                  550 	ret
                            551 ;------------------------------------------------------------
                            552 ;Allocation info for local variables in function 'int_loop'
                            553 ;------------------------------------------------------------
                            554 ;------------------------------------------------------------
                            555 ;	SRC/handler.c:58: void int_loop() {
                            556 ;	-----------------------------------------
                            557 ;	 function int_loop
                            558 ;	-----------------------------------------
   0092                     559 _int_loop:
                            560 ;	SRC/handler.c:59: while( read_dip()!=DIP_POLL_MODE ){
   0092                     561 00101$:
   0092 12s00r00            562 	lcall	_read_dip
   0095 AA 82               563 	mov	r2,dpl
   0097 90s00r03            564 	mov	dptr,#_DIP_POLL_MODE
   009A E4                  565 	clr	a
   009B 93                  566 	movc	a,@a+dptr
   009C FB                  567 	mov	r3,a
   009D EA                  568 	mov	a,r2
   009E B5 03 02            569 	cjne	a,ar3,00108$
   00A1 80 0B               570 	sjmp	00103$
   00A3                     571 00108$:
                            572 ;	SRC/handler.c:60: delay_ms(1);
   00A3 90 00 01            573 	mov	dptr,#(0x01&0x00ff)
   00A6 E4                  574 	clr	a
   00A7 F5 F0               575 	mov	b,a
   00A9 12s00r00            576 	lcall	_delay_ms
   00AC 80 E4               577 	sjmp	00101$
   00AE                     578 00103$:
                            579 ;	SRC/handler.c:63: mode=MODE_POLL;
   00AE 90s00r02            580 	mov	dptr,#_MODE_POLL
   00B1 E4                  581 	clr	a
   00B2 93                  582 	movc	a,@a+dptr
   00B3 F5*01               583 	mov	_mode,a
   00B5 22                  584 	ret
                            585 ;------------------------------------------------------------
                            586 ;Allocation info for local variables in function 'handler_loop'
                            587 ;------------------------------------------------------------
                            588 ;------------------------------------------------------------
                            589 ;	SRC/handler.c:66: void handler_loop() {
                            590 ;	-----------------------------------------
                            591 ;	 function handler_loop
                            592 ;	-----------------------------------------
   00B6                     593 _handler_loop:
                            594 ;	SRC/handler.c:67: while(1) {
   00B6                     595 00105$:
                            596 ;	SRC/handler.c:68: if( mode==MODE_POLL ) {
   00B6 90s00r02            597 	mov	dptr,#_MODE_POLL
   00B9 E4                  598 	clr	a
   00BA 93                  599 	movc	a,@a+dptr
   00BB FA                  600 	mov	r2,a
   00BC B5*01 0E            601 	cjne	a,_mode,00102$
                            602 ;	SRC/handler.c:69: send_string("\r\npoll mode\r\n");
   00BF 90s00r08            603 	mov	dptr,#__str_1
   00C2 75 F0 80            604 	mov	b,#0x80
   00C5 12s00r00            605 	lcall	_send_string
                            606 ;	SRC/handler.c:70: poll_loop();
   00C8 12s00r17            607 	lcall	_poll_loop
   00CB 80 E9               608 	sjmp	00105$
   00CD                     609 00102$:
                            610 ;	SRC/handler.c:72: send_string("\r\ninteruption mode\r\n");
   00CD 90s00r16            611 	mov	dptr,#__str_2
   00D0 75 F0 80            612 	mov	b,#0x80
   00D3 12s00r00            613 	lcall	_send_string
                            614 ;	SRC/handler.c:73: int_loop();
   00D6 12s00r92            615 	lcall	_int_loop
   00D9 80 DB               616 	sjmp	00105$
                            617 ;------------------------------------------------------------
                            618 ;Allocation info for local variables in function 'error'
                            619 ;------------------------------------------------------------
                            620 ;------------------------------------------------------------
                            621 ;	SRC/handler.c:78: void error() {
                            622 ;	-----------------------------------------
                            623 ;	 function error
                            624 ;	-----------------------------------------
   00DB                     625 _error:
                            626 ;	SRC/handler.c:79: send_string("\r\nerror\r\n");
   00DB 90s00r2B            627 	mov	dptr,#__str_3
   00DE 75 F0 80            628 	mov	b,#0x80
   00E1 12s00r00            629 	lcall	_send_string
                            630 ;	SRC/handler.c:80: state=STATE_ERROR;
   00E4 75*03 02            631 	mov	_state,#0x02
   00E7 22                  632 	ret
                            633 ;------------------------------------------------------------
                            634 ;Allocation info for local variables in function 'handler_int'
                            635 ;------------------------------------------------------------
                            636 ;num                       Allocated to registers r2 
                            637 ;sym                       Allocated to stack - offset 1
                            638 ;array                     Allocated to stack - offset 2
                            639 ;i                         Allocated to registers r2 r3 
                            640 ;count                     Allocated to registers r2 r3 
                            641 ;------------------------------------------------------------
                            642 ;	SRC/handler.c:84: void handler_int() {
                            643 ;	-----------------------------------------
                            644 ;	 function handler_int
                            645 ;	-----------------------------------------
   00E8                     646 _handler_int:
   00E8 C0*00               647 	push	_bp
   00EA E5 81               648 	mov	a,sp
   00EC F5*00               649 	mov	_bp,a
   00EE 24 11               650 	add	a,#0x11
   00F0 F5 81               651 	mov	sp,a
                            652 ;	SRC/handler.c:87: int array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   00F2 E5*00               653 	mov	a,_bp
   00F4 24 02               654 	add	a,#0x02
   00F6 F8                  655 	mov	r0,a
   00F7 76 00               656 	mov	@r0,#0x00
   00F9 08                  657 	inc	r0
   00FA 76 00               658 	mov	@r0,#0x00
   00FC 18                  659 	dec	r0
   00FD 74 02               660 	mov	a,#0x02
   00FF 28                  661 	add	a,r0
   0100 F9                  662 	mov	r1,a
   0101 77 00               663 	mov	@r1,#0x00
   0103 09                  664 	inc	r1
   0104 77 00               665 	mov	@r1,#0x00
   0106 74 04               666 	mov	a,#0x04
   0108 28                  667 	add	a,r0
   0109 F9                  668 	mov	r1,a
   010A 77 00               669 	mov	@r1,#0x00
   010C 09                  670 	inc	r1
   010D 77 00               671 	mov	@r1,#0x00
   010F 74 06               672 	mov	a,#0x06
   0111 28                  673 	add	a,r0
   0112 F9                  674 	mov	r1,a
   0113 77 00               675 	mov	@r1,#0x00
   0115 09                  676 	inc	r1
   0116 77 00               677 	mov	@r1,#0x00
   0118 74 08               678 	mov	a,#0x08
   011A 28                  679 	add	a,r0
   011B F9                  680 	mov	r1,a
   011C 77 00               681 	mov	@r1,#0x00
   011E 09                  682 	inc	r1
   011F 77 00               683 	mov	@r1,#0x00
   0121 74 0A               684 	mov	a,#0x0A
   0123 28                  685 	add	a,r0
   0124 F9                  686 	mov	r1,a
   0125 77 00               687 	mov	@r1,#0x00
   0127 09                  688 	inc	r1
   0128 77 00               689 	mov	@r1,#0x00
   012A 74 0C               690 	mov	a,#0x0C
   012C 28                  691 	add	a,r0
   012D F9                  692 	mov	r1,a
   012E 77 00               693 	mov	@r1,#0x00
   0130 09                  694 	inc	r1
   0131 77 00               695 	mov	@r1,#0x00
   0133 74 0E               696 	mov	a,#0x0E
   0135 28                  697 	add	a,r0
   0136 F9                  698 	mov	r1,a
   0137 77 00               699 	mov	@r1,#0x00
   0139 09                  700 	inc	r1
   013A 77 00               701 	mov	@r1,#0x00
                            702 ;	SRC/handler.c:91: if( state==STATE_ERROR ){//i?euaai iinea ioeaee
   013C 74 02               703 	mov	a,#0x02
   013E B5*03 07            704 	cjne	a,_state,00102$
                            705 ;	SRC/handler.c:92: reset();
   0141 C0 00               706 	push	ar0
   0143 12s00r06            707 	lcall	_reset
   0146 D0 00               708 	pop	ar0
   0148                     709 00102$:
                            710 ;	SRC/handler.c:95: if( read_byte(&sym) ){
   0148 AA*00               711 	mov	r2,_bp
   014A 0A                  712 	inc	r2
   014B 7B 00               713 	mov	r3,#0x00
   014D 7C 40               714 	mov	r4,#0x40
   014F 8A 82               715 	mov	dpl,r2
   0151 8B 83               716 	mov	dph,r3
   0153 8C F0               717 	mov	b,r4
   0155 C0 00               718 	push	ar0
   0157 12s00r00            719 	lcall	_read_byte
   015A E5 82               720 	mov	a,dpl
   015C D0 00               721 	pop	ar0
   015E 70 03               722 	jnz	00141$
   0160 02s02r72            723 	ljmp	00118$
   0163                     724 00141$:
                            725 ;	SRC/handler.c:96: switch (state) {
   0163 E4                  726 	clr	a
   0164 B5*03 02            727 	cjne	a,_state,00142$
   0167 80 03               728 	sjmp	00143$
   0169                     729 00142$:
   0169 02s02r75            730 	ljmp	00124$
   016C                     731 00143$:
                            732 ;	SRC/handler.c:98: if(sym>='0' && sym<='9'){
   016C A9*00               733 	mov	r1,_bp
   016E 09                  734 	inc	r1
   016F B7 30 00            735 	cjne	@r1,#0x30,00144$
   0172                     736 00144$:
   0172 40 53               737 	jc	00113$
   0174 A9*00               738 	mov	r1,_bp
   0176 09                  739 	inc	r1
   0177 E7                  740 	mov	a,@r1
   0178 24 C6               741 	add	a,#0xff - 0x39
   017A 40 4B               742 	jc	00113$
                            743 ;	SRC/handler.c:99: send_byte(sym);
   017C A8*00               744 	mov	r0,_bp
   017E 08                  745 	inc	r0
   017F 86 82               746 	mov	dpl,@r0
   0181 12s00r00            747 	lcall	_send_byte
                            748 ;	SRC/handler.c:100: num=sym-'0';
   0184 A8*00               749 	mov	r0,_bp
   0186 08                  750 	inc	r0
   0187 E6                  751 	mov	a,@r0
   0188 24 D0               752 	add	a,#0xd0
   018A FA                  753 	mov	r2,a
                            754 ;	SRC/handler.c:102: if( num > NUMBER_LIMIT-number*10 ) {//noaiao aieuoa, ?ai NUMBER_LIMIT
   018B 90s00r04            755 	mov	dptr,#_NUMBER_LIMIT
   018E E4                  756 	clr	a
   018F 93                  757 	movc	a,@a+dptr
   0190 FB                  758 	mov	r3,a
   0191 7C 00               759 	mov	r4,#0x00
   0193 E5*02               760 	mov	a,_number
   0195 75 F0 0A            761 	mov	b,#0x0A
   0198 A4                  762 	mul	ab
   0199 D3                  763 	setb	c
   019A 9B                  764 	subb	a,r3
   019B F4                  765 	cpl	a
   019C B3                  766 	cpl	c
   019D FB                  767 	mov	r3,a
   019E EC                  768 	mov	a,r4
   019F 95 F0               769 	subb	a,b
   01A1 FC                  770 	mov	r4,a
   01A2 8A 05               771 	mov	ar5,r2
   01A4 7E 00               772 	mov	r6,#0x00
   01A6 C3                  773 	clr	c
   01A7 EB                  774 	mov	a,r3
   01A8 9D                  775 	subb	a,r5
   01A9 EC                  776 	mov	a,r4
   01AA 64 80               777 	xrl	a,#0x80
   01AC 8E F0               778 	mov	b,r6
   01AE 63 F0 80            779 	xrl	b,#0x80
   01B1 95 F0               780 	subb	a,b
   01B3 50 06               781 	jnc	00105$
                            782 ;	SRC/handler.c:103: error();
   01B5 12s00rDB            783 	lcall	_error
                            784 ;	SRC/handler.c:104: return;
   01B8 02s02r75            785 	ljmp	00124$
   01BB                     786 00105$:
                            787 ;	SRC/handler.c:107: number*=10;
   01BB E5*02               788 	mov	a,_number
   01BD 75 F0 0A            789 	mov	b,#0x0A
   01C0 A4                  790 	mul	ab
                            791 ;	SRC/handler.c:108: number+=num;
   01C1 2A                  792 	add	a,r2
   01C2 F5*02               793 	mov	_number,a
   01C4 02s02r75            794 	ljmp	00124$
   01C7                     795 00113$:
                            796 ;	SRC/handler.c:109: }else if (sym == '\r'){
   01C7 A9*00               797 	mov	r1,_bp
   01C9 09                  798 	inc	r1
   01CA B7 0D 02            799 	cjne	@r1,#0x0D,00148$
   01CD 80 03               800 	sjmp	00149$
   01CF                     801 00148$:
   01CF 02s02r6D            802 	ljmp	00110$
   01D2                     803 00149$:
                            804 ;	SRC/handler.c:110: send_string("\r\nBin:");
   01D2 90s00r35            805 	mov	dptr,#__str_4
   01D5 75 F0 80            806 	mov	b,#0x80
   01D8 C0 00               807 	push	ar0
   01DA 12s00r00            808 	lcall	_send_string
   01DD D0 00               809 	pop	ar0
                            810 ;	SRC/handler.c:111: while (number > 0) {
   01DF 7A 00               811 	mov	r2,#0x00
   01E1 7B 00               812 	mov	r3,#0x00
   01E3                     813 00106$:
   01E3 E5*02               814 	mov	a,_number
   01E5 60 25               815 	jz	00108$
                            816 ;	SRC/handler.c:112: array[count] = number % 2;
   01E7 8A 04               817 	mov	ar4,r2
   01E9 EB                  818 	mov	a,r3
   01EA CC                  819 	xch	a,r4
   01EB 25 E0               820 	add	a,acc
   01ED CC                  821 	xch	a,r4
   01EE 33                  822 	rlc	a
   01EF EC                  823 	mov	a,r4
   01F0 28                  824 	add	a,r0
   01F1 F9                  825 	mov	r1,a
   01F2 74 01               826 	mov	a,#0x01
   01F4 55*02               827 	anl	a,_number
   01F6 FC                  828 	mov	r4,a
   01F7 7D 00               829 	mov	r5,#0x00
   01F9 A7 04               830 	mov	@r1,ar4
   01FB 09                  831 	inc	r1
   01FC A7 05               832 	mov	@r1,ar5
   01FE 19                  833 	dec	r1
                            834 ;	SRC/handler.c:113: number = number / 2;
   01FF E5*02               835 	mov	a,_number
   0201 C3                  836 	clr	c
   0202 13                  837 	rrc	a
   0203 F5*02               838 	mov	_number,a
                            839 ;	SRC/handler.c:114: count++;
   0205 0A                  840 	inc	r2
   0206 BA 00 DA            841 	cjne	r2,#0x00,00106$
   0209 0B                  842 	inc	r3
   020A 80 D7               843 	sjmp	00106$
   020C                     844 00108$:
                            845 ;	SRC/handler.c:116: for (i = 7; i >= 0; i--) {
   020C 7A 07               846 	mov	r2,#0x07
   020E 7B 00               847 	mov	r3,#0x00
   0210                     848 00120$:
   0210 EB                  849 	mov	a,r3
   0211 20 E7 4B            850 	jb	acc.7,00123$
                            851 ;	SRC/handler.c:117: send_byte(array[i] + '0');
   0214 8A 04               852 	mov	ar4,r2
   0216 EB                  853 	mov	a,r3
   0217 CC                  854 	xch	a,r4
   0218 25 E0               855 	add	a,acc
   021A CC                  856 	xch	a,r4
   021B 33                  857 	rlc	a
   021C EC                  858 	mov	a,r4
   021D 28                  859 	add	a,r0
   021E F9                  860 	mov	r1,a
   021F 87 04               861 	mov	ar4,@r1
   0221 09                  862 	inc	r1
   0222 87 05               863 	mov	ar5,@r1
   0224 19                  864 	dec	r1
   0225 74 30               865 	mov	a,#0x30
   0227 2C                  866 	add	a,r4
   0228 F5 82               867 	mov	dpl,a
   022A C0 02               868 	push	ar2
   022C C0 03               869 	push	ar3
   022E C0 00               870 	push	ar0
   0230 C0 01               871 	push	ar1
   0232 12s00r00            872 	lcall	_send_byte
   0235 D0 01               873 	pop	ar1
   0237 D0 00               874 	pop	ar0
   0239 D0 03               875 	pop	ar3
   023B D0 02               876 	pop	ar2
                            877 ;	SRC/handler.c:118: led(i, array[i]);
   023D 87 04               878 	mov	ar4,@r1
   023F 09                  879 	inc	r1
   0240 87 05               880 	mov	ar5,@r1
   0242 19                  881 	dec	r1
   0243 8A 82               882 	mov	dpl,r2
   0245 C0 02               883 	push	ar2
   0247 C0 03               884 	push	ar3
   0249 C0 00               885 	push	ar0
   024B C0 04               886 	push	ar4
   024D 12s00r00            887 	lcall	_led
   0250 15 81               888 	dec	sp
   0252 D0 00               889 	pop	ar0
   0254 D0 03               890 	pop	ar3
   0256 D0 02               891 	pop	ar2
                            892 ;	SRC/handler.c:116: for (i = 7; i >= 0; i--) {
   0258 1A                  893 	dec	r2
   0259 BA FF 01            894 	cjne	r2,#0xff,00152$
   025C 1B                  895 	dec	r3
   025D                     896 00152$:
   025D 80 B1               897 	sjmp	00120$
   025F                     898 00123$:
                            899 ;	SRC/handler.c:121: send_string("\r\n");
   025F 90s00r05            900 	mov	dptr,#__str_0
   0262 75 F0 80            901 	mov	b,#0x80
   0265 12s00r00            902 	lcall	_send_string
                            903 ;	SRC/handler.c:122: reset();
   0268 12s00r06            904 	lcall	_reset
   026B 80 08               905 	sjmp	00124$
   026D                     906 00110$:
                            907 ;	SRC/handler.c:125: error();
   026D 12s00rDB            908 	lcall	_error
                            909 ;	SRC/handler.c:128: }
   0270 80 03               910 	sjmp	00124$
   0272                     911 00118$:
                            912 ;	SRC/handler.c:130: error();
   0272 12s00rDB            913 	lcall	_error
   0275                     914 00124$:
   0275 85*00 81            915 	mov	sp,_bp
   0278 D0*00               916 	pop	_bp
   027A 22                  917 	ret
                            918 	.area CSEG    (CODE)
                            919 	.area CONST   (CODE)
   0000                     920 _true:
   0000 FF                  921 	.db #0xFF
   0001                     922 _false:
   0001 00                  923 	.db #0x00
   0002                     924 _MODE_POLL:
   0002 00                  925 	.db #0x00
   0003                     926 _DIP_POLL_MODE:
   0003 01                  927 	.db #0x01
   0004                     928 _NUMBER_LIMIT:
   0004 FF                  929 	.db #0xFF
   0005                     930 __str_0:
   0005 0D                  931 	.db 0x0D
   0006 0A                  932 	.db 0x0A
   0007 00                  933 	.db 0x00
   0008                     934 __str_1:
   0008 0D                  935 	.db 0x0D
   0009 0A                  936 	.db 0x0A
   000A 70 6F 6C 6C 20 6D   937 	.ascii "poll mode"
        6F 64 65
   0013 0D                  938 	.db 0x0D
   0014 0A                  939 	.db 0x0A
   0015 00                  940 	.db 0x00
   0016                     941 __str_2:
   0016 0D                  942 	.db 0x0D
   0017 0A                  943 	.db 0x0A
   0018 69 6E 74 65 72 75   944 	.ascii "interuption mode"
        70 74 69 6F 6E 20
        6D 6F 64 65
   0028 0D                  945 	.db 0x0D
   0029 0A                  946 	.db 0x0A
   002A 00                  947 	.db 0x00
   002B                     948 __str_3:
   002B 0D                  949 	.db 0x0D
   002C 0A                  950 	.db 0x0A
   002D 65 72 72 6F 72      951 	.ascii "error"
   0032 0D                  952 	.db 0x0D
   0033 0A                  953 	.db 0x0A
   0034 00                  954 	.db 0x00
   0035                     955 __str_4:
   0035 0D                  956 	.db 0x0D
   0036 0A                  957 	.db 0x0A
   0037 42 69 6E 3A         958 	.ascii "Bin:"
   003B 00                  959 	.db 0x00
                            960 	.area XINIT   (CODE)
                            961 	.area CABS    (ABS,CODE)
